// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//------------------- Model ------------------------

model Contrat {
  idContrat          Int         @id @default(autoincrement())
  dateDebutContrat   DateTime   @default(now())
  dateFinContrat     DateTime?    @default(now())
  montantContrat     Float?
  descriptionContrat String?
  contratRenouvable  Boolean?
  typeContrat        String?
  etatContrat        String?
  Signature          Signature[]
}





model Signature {
  idSignature      Int      @id @default(autoincrement())
  idSociete Int?
  idContrat Int?
  dateSignature    DateTime @default(now())
  Societe          Societe? @relation(fields: [idSociete], references: [idSociete])
  Contrat          Contrat? @relation(fields: [idContrat], references: [idContrat])
}

model Stocks {
  refArt                     String              @id
  marque                     String
  modele                     String
  prix                       Float
  quantiteStock              Int
  capaciteToner              Int?
  compatibiliteToner         String?
  capaciteFlashDvdCdRamHDD   Int?
  typeConnexionClavierSouris TypeConnexion?
  dispositionToucheClavier   Disposition?
  nombreBouttonSouris        Int?
  memoireCarteGraphiqueRam   Int?
  IntefaceCarteGraphique     String?
  frequenceCarteGraphiqueRam Int?
  typeRam                    String?
  vitesseHDD                 Int?
  autre                      String?
  categorie                  CategorieAccessoire
  couleurToner               Couleur?
  typeDisqueStockage         TypeDisque?
  interFaceHDD               InterfaceHDD?
  tailleHDD                  String?
  TypeHDD                    TypeHDD?
  Alimentation               Alimentation[]
  Consommation               Consommation[]
}

model Alimentation {
  idAlimentation   Int      @id @default(autoincrement())
  idSociete        Int?
  refArt           String?
  dateAlimentation DateTime @default(now())
  quantiteAlimente Int
  Societe          Societe? @relation(fields: [idSociete], references: [idSociete])
  Stocks           Stocks?  @relation(fields: [refArt], references: [refArt])
}

enum CategorieAccessoire {
  Toner
  DisqueStockage
  DisqueDurExterne
  DisqueDurInterne
  Clavier
  Souris
  FlashDisque
  CarteGraphique
  Ram
  CartoucheEncre
  Autres
}

enum InterfaceHDD {
  SATA
  USB
  PCIe
  IDE
}

enum TypeHDD {
  HDD
  SSD
  SSHD
}

enum Disposition {
  AZERTY
  QWERTY
}

enum TypeConnexion {
  USB
  WIFI
  BLUETOOTH
}

enum TypeDisque {
  CD
  DVD
}

enum Couleur {
  NOIR
  COULEUR
  MAGENTA
  JAUNE
  BLEU
}

model Societe {
  idSociete       Int            @id @default(autoincrement())
  raisonSociale   String
  adresse         String
  responsable     String
  email           String
  numtel          String
  secteurActivite String
  typeSociete     TypeSociete    @default(FOURNISSEUR)
  Materiel        Materiel[]
  Alimentation    Alimentation[]
  Logiciel        Logiciel[]
  Signature       Signature[]
}

model Licence {
  idLicence      Int            @id @default(autoincrement())
  numeroLicence  String
  dateActivation DateTime?      @default(now())
  dateExpiration DateTime?      @default(now())
  prixLicence    Float?
  statutLicence  String? //assign√© ou disponible 
  Installation   Installation[]
  Logiciel       Logiciel?      @relation(fields: [idLogiciel], references: [idLogiciel])
  idLogiciel     Int?
}

model Logiciel {
  idLogiciel      Int          @id @default(autoincrement())
  libelle         String
  version         String
  editeur         String
  dateAcquisition DateTime     @default(now())
  typeLogiciel    TypeLogiciel
  idSociete       Int?
  Societe         Societe?     @relation(fields: [idSociete], references: [idSociete])
  Licence         Licence[]
  Incident        Incident[]
}

enum TypeLogiciel {
  Bureautique
  Technique
}

model Installation {
  idInstallation      Int       @id @default(autoincrement())
  numeroSerie         String?
  idLicence           Int?
  dateInstallation    DateTime  @default(now())
  dateDesinstallation DateTime?
  etatOperation       String?
  Materiel            Materiel? @relation(fields: [numeroSerie], references: [numeroSerie])
  Licence             Licence?  @relation(fields: [idLicence], references: [idLicence])
}

model Affectation {
  idAffectation   Int          @id @default(autoincrement())
  idUtilisateur   Int?
  numeroSerie     String?
  dateAttribution DateTime     @default(now())
  dateRetour      DateTime?
  motifRetour     String?
  Materiel        Materiel?    @relation(fields: [numeroSerie], references: [numeroSerie])
  Utilisateur     Utilisateur? @relation(fields: [idUtilisateur], references: [idUtilisateur])
}

model Emprunt {
  idEmprunt          Int          @id @default(autoincrement())
  idUtilisateur      Int?
  numeroSerie        String?
  dateEmprunt        DateTime     @default(now())
  dateRestitution    DateTime?
  refProjet          String
  etatMatRestitution String?
  Materiel           Materiel?    @relation(fields: [numeroSerie], references: [numeroSerie])
  Utilisateur        Utilisateur? @relation(fields: [idUtilisateur], references: [idUtilisateur])
}

model Departement {
  idDepartement     String       @id
  nom               String
  statutDepartement String       @default("Actif")
  Specialite        Specialite[]
}

model Materiel {
  numeroSerie                   String                 @id
  categorie                     Categorie              @default(UniteCentrale)
  marque                        String
  modele                        String
  prix                          Float
  garantie                      String
  etatMateriel                  EtatMateriel           @default(nouveau)
  dateAcquisition               DateTime               @default(now())
  idSociete                     Int
  disponibilite                 String                 @default("Disponible")
  nombrePortSwitch              Int?
  debitSwitch                   Int?
  technologieSwitch             String?
  processeurPC                  String?
  memoireCache                  String?
  ram                           String?
  disque                        String?
  carteGraphique                String?
  nombreDisque                  String?
  tailleEcran                   Float?
  etatBatteriePcPortable        String?
  vitesseImpression             String?
  connexionWLU                  ConnexionWLU?
  technologieOnduleur           TechnologieOnduleur?
  fonctionSupplementaireScanImp String?
  vitesseScanner                String?
  typeScanner                   TypeScanner?
  resolutionScanImpVideoP       String?
  technologieImpression         TechnologieImpression?
  formatScanImp                 String?
  poidsOnduleur                 String?
  autonomieOnduleur             String?
  capaciteChargeOnduleur        String?
  entreeHDMI_VideoProjecteur    Boolean?
  entreeVGA_VideoProjecteur     Boolean?
  entreeUSB_VideoProjecteur     Boolean?
  entreeLAN_VideoProjecteur     Boolean?
  Affectation                   Affectation[]
  Emprunt                       Emprunt[]
  Societe                       Societe?               @relation(fields: [idSociete], references: [idSociete])
  Installation                  Installation[]
  Consommation                  Consommation[]
  Incident                      Incident[]
}

model Specialite {
  idSpecialite     String        @id
  nom              String
  statutSpecialite String        @default("Actif")
  Utilisateur      Utilisateur[]
  Departement      Departement?  @relation(fields: [idDepartement], references: [idDepartement])
  idDepartement    String?
}

model Utilisateur {
  idUtilisateur        Int             @id
  password             String
  fullName             String
  email                String
  createdAt            DateTime?       @default(now())
  lastLogin            DateTime?
  roleUtilisateur      RoleUtilisateur @default(EMPLOYE)
  etatUtilisateur      EtatUtilisateur @default(actif)
  telFix               String?
  telMobile            String?
  Affectation          Affectation[]
  Emprunt              Emprunt[]
  Specialite           Specialite?     @relation(fields: [idSpecialite], references: [idSpecialite])
  idSpecialite         String?
  Consommation         Consommation[]
  incidentsDemandeur   Incident[]      @relation("DemandeurRelation")
  incidentsIntervenant Incident[]      @relation("IncidentRelation")
}

model Incident {
  idIncident          Int          @id @default(autoincrement())
  demandeurId         Int?
  intervenantId       Int?
  materielNumeroSerie String?
  logicielIdLogiciel  Int?
  priorite            String
  dateCreation        DateTime
  dateCloture         DateTime
  natureIncident      String
  solutionRealisee    String
  etatReclamation     String
  emplacement         String
  demandeur           Utilisateur? @relation("DemandeurRelation", fields: [demandeurId], references: [idUtilisateur])
  intervenant         Utilisateur? @relation("IncidentRelation", fields: [intervenantId], references: [idUtilisateur])
  Materiel            Materiel?    @relation(fields: [materielNumeroSerie], references: [numeroSerie])
  Logiciel            Logiciel?    @relation(fields: [logicielIdLogiciel], references: [idLogiciel])
}

model Consommation {
  idConsommation   Int          @id @default(autoincrement())
  idUtilisateur    Int?
  numeroSerie      String?
  refArt           String?
  dateConsommation DateTime     @default(now())
  quantiteConsomme Int?
  Stocks           Stocks?      @relation(fields: [refArt], references: [refArt])
  Materiel         Materiel?    @relation(fields: [numeroSerie], references: [numeroSerie])
  Utilisateur      Utilisateur? @relation(fields: [idUtilisateur], references: [idUtilisateur])
}

//------ ENUM--------
enum Categorie {
  UniteCentrale
  Ecran
  PcPortable
  Imprimante
  Scanner
  Onduleur
  VideoProjecteur
  Serveur
  Switch
}

enum TypeSociete {
  FOURNISSEUR
  PRESTATAIRE
  FOURNISSEUR_PRESTATAIRE
}

enum ConnexionWLU {
  WIFI
  LAN
  USB
}

enum EtatMateriel {
  nouveau
  fonctionnel
  enPanne
  rebut
}

enum TypeScanner {
  Aplat
  ChargeAutomatique
}

enum TechnologieImpression {
  inkTank
  ecoTank
  Laser
  JetEncre
}

enum TechnologieOnduleur {
  off_line
  on_line
  in_line
}

enum EtatUtilisateur {
  actif
  inactif
  suspendu
}

enum RoleUtilisateur {
  DIRECTEUR
  ADMINISTRATEUR
  TECHNICIEN
  EMPLOYE
  RMQ
}
